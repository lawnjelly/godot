//	Copyright (c) 2019 Lawnjelly

//	Permission is hereby granted, free of charge, to any person obtaining a copy
//	of this software and associated documentation files (the "Software"), to deal
//	in the Software without restriction, including without limitation the rights
//	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//	copies of the Software, and to permit persons to whom the Software is
//	furnished to do so, subject to the following conditions:

//	The above copyright notice and this permission notice shall be included in all
//	copies or substantial portions of the Software.

//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//	SOFTWARE.

/* portal.h */
#ifndef LPORTAL_H
#define LPORTAL_H

/**
	@author lawnjelly <lawnjelly@gmail.com>
*/


#include "scene/3d/spatial.h"
#include "lvector.h"

class LRoom;
class LRoomManager;
class Light;




class LPortal {
public:

	enum eClipResult
	{
		CLIP_OUTSIDE,
		CLIP_PARTIAL,
		CLIP_INSIDE,
	};


	const String &get_name() const {return m_szName;}

	// linked room, this is the number not godot ID
	int m_iRoomNum;
	String m_szName;

	LPortal::eClipResult ClipWithPlane(const Plane &p) const;
	void AddPlanes(LRoomManager &manager, const Vector3 &ptCam, LVector<Plane> &planes) const;

	// reverse direction if we are going back through portals TOWARDS the light rather than away from it
	// (the planes will need reversing because the portal winding will be opposite)
	void AddLightPlanes(LRoomManager &manager, const LLight &light, LVector<Plane> &planes, bool bReverse) const;

	// normal determined by winding order
	Vector<Vector3> m_ptsWorld;
	Vector3 m_ptCentre; // world
	Plane m_Plane;

	// whether this is an autogenerated mirror portal
	// this is used only on conversion of 2 way portals to prevent recursion .. maybe not needed at runtime?
	bool m_bMirror;

	// frame counter when last touched .. prevents going backward through portals
	//unsigned int m_uiFrameTouched_Blocked;

	LPortal();

	void CopyReversedGeometry(const LPortal &source);
	void CreateGeometry(PoolVector<Vector3> p_vertices, const Transform &trans, bool bPortalPlane_Convention);
	void PlaneFromPoints();
	void SortVertsClockwise(bool bPortalPlane_Convention);
	void ReverseWindingOrder();

	// useful funcs
	static bool NameStartsWith(const Node * pNode, String szSearch);
	static String FindNameAfter(Node * pNode, String szStart);

private:
	void Debug_CheckPlaneValidity(const Plane &p) const;
};


#endif
