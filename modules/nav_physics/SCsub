#!/usr/bin/env python

# SCsub
Import("env")
Import("env_modules")

env_nav_physics = env_modules.Clone()

# Thirdparty source files
# thirdparty_obj = []


# Recast
# ~ if env["builtin_recast"]:
# ~ thirdparty_dir = "#thirdparty/recastnavigation/Recast/"
# ~ thirdparty_sources = [
# ~ "Source/Recast.cpp",
# ~ "Source/RecastAlloc.cpp",
# ~ "Source/RecastArea.cpp",
# ~ "Source/RecastAssert.cpp",
# ~ "Source/RecastContour.cpp",
# ~ "Source/RecastFilter.cpp",
# ~ "Source/RecastLayers.cpp",
# ~ "Source/RecastMesh.cpp",
# ~ "Source/RecastMeshDetail.cpp",
# ~ "Source/RecastRasterization.cpp",
# ~ "Source/RecastRegion.cpp",
# ~ ]
# ~ thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

# ~ env_nav_physics.Prepend(CPPPATH=[thirdparty_dir + "Include"])

# ~ env_thirdparty = env_nav_physics.Clone()
# ~ env_thirdparty.disable_warnings()
# ~ env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
# ~ env.modules_sources += thirdparty_obj

thirdparty_dir = "#thirdparty/recastnavigation/Recast/"
env_nav_physics.Prepend(CPPPATH=[thirdparty_dir + "Include"])


sources = [
    "source/navphysics_all.cpp",
    "source/navphysics_godot_classes.cpp",
]

# module_env = env.Clone()

if ARGUMENTS.get("nav_physics_shared", "no") == "yes":
    # Shared lib compilation
    env_nav_physics.Append(CXXFLAGS="-fPIC")
    env_nav_physics["LIBS"] = []
    shared_lib = env_nav_physics.SharedLibrary(target="#bin/nav_physics", source=sources)
    shared_lib_shim = shared_lib[0].name.rsplit(".", 1)[0]
    env.Append(LIBS=[shared_lib_shim])
    env.Append(LIBPATH=["#bin"])
else:
    # Static compilation
    env_nav_physics.add_source_files(env.modules_sources, sources)
